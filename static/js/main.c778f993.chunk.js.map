{"version":3,"sources":["components/NavBar/NavBar.js","components/Wrapper/Wrapper.js","components/Title/Title.js","components/AuthorCard/AuthorCard.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","game","message","score","topScore","react_default","a","createElement","className","Wrapper","props","children","Title","AuthorCard","alt","name","src","image","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","id","authorCard","state","cards","clickedCard","filter","card","clicked","handleWrongClick","handleRightClick","randomizeAuthors","setState","images","sort","b","Math","random","correctGuess","messageClass","resetGame","authors","i","length","maxScore","_this2","_this$state","Fragment","NavBar_NavBar","Title_Title","Wrapper_Wrapper","map","AuthorCard_AuthorCard","key","clickHandler","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c778f993.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar({game, message, score, topScore}) {\r\n    return (\r\n            <nav className=\"navbar-fixed\">\r\n                <div className=\"nav-wrapper\">\r\n                    <li className=\"brand-logo left\">{game}</li>\r\n                    <li className=\"brand-logo center\">{message}</li>\r\n                    <li className=\"brand-logo right\">Score: {score} | High Score: {topScore}</li>\r\n                </div>\r\n            </nav>\r\n        );\r\n    };\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title() {\r\n  return (\r\n    <header>\r\n      <h1>\r\n        America's Greatest Authors Click Game!\r\n      </h1>\r\n       \r\n      {/* <h2 className=\"flow-text\">\r\n        Click on an image to earn points, but don't click the same one twice!\r\n      </h2>  */}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n            \r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction AuthorCard(props) {\r\n    return (\r\n        <div className=\"card hoverable\">\r\n           <div className=\"card-image\">\r\n               <img className=\"responsive-img\" alt={props.name} src={props.image} />\r\n            </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AuthorCard;\r\n","import React, { Component } from \"react\";\n\nimport NavBar from \"./components/NavBar/NavBar.js\";\nimport Wrapper from\"./components/Wrapper/Wrapper.js\";\nimport Title from \"./components/Title/Title.js\";\nimport AuthorCard from \"./components/AuthorCard\";\nimport authors from \"./authors.json\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    //set this.state to the authors json array, create score key values\n    this.state = {\n      authors: authors,\n      correctGuess: true,\n      score: 0,\n      maxScore: 14,\n      topScore: 0,\n      game: \"Clicky Game\",\n      message: \"Click an Image to Begin\"\n    };\n  }\n\n  //create function to handle user clicks and pass correct or incorrect click functions through\n  handleClick = id => {\n    const authorCard = this.state.cards;\n    const clickedCard = authorCard.filter(card => card.id === id);\n\n    if(!clickedCard[0].clicked) {\n      clickedCard[0].clicked= true;\n      this.handleRightClick();\n      this.randomizeAuthors(authorCard);\n      this.setState({authorCard});\n    } else {\n      this.handleWrongClick();\n    }\n  };\n\n  //create function to redistribute images in random order every time user clicks\n  randomizeAuthors = images => {\n    images.sort((a,b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  //create function to handle correct user guesses and add to score\n  handleRightClick = () => {\n    this.setState({correctGuess: true});\n    if(this.state.score + 1 > this.state.topScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"You Win!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  //create function to handle incorrect user guesses and call to reset game\n  handleWrongClick = () => {\n    this.setState({\n      message: \"Uh oh! Click to play again!\",\n      correctGuess: false\n    });\n    this.resetGame();\n  };\n\n  //create function to reset the entire game\n  resetGame = id => {\n    const authorCard = this.state.authors;\n    for (let i = 0; i < authorCard.length; i++) {\n      authorCard[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  //map over this.state.authors and render an AuthorCard component for each author object\n    render() {\n      const {game, message, score, authors, topScore} = this.state;\n      return (\n        <React.Fragment>\n          <NavBar \n            className=\"row\"\n            game={game}\n            message={message}\n            score={score}\n            topScore={topScore}\n          />\n\n          <Title />\n\n          <div>\n            <Wrapper>\n              {authors.map(({id, image, clicked}) => (\n                <AuthorCard\n                  id={id}\n                  key={id}\n                  image={image}\n                  clicked={clicked}\n                  clickHandler={this.handleClick}\n                />\n              ))}\n            </Wrapper>\n          </div>\n        </React.Fragment>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}